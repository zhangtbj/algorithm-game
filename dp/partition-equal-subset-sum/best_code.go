package main

import (
	"fmt"
)

func main() {
	//nums := []int{}
	nums := []int{1, 5, 1, 10, 5}

	fmt.Println(canPartition(nums))
}

func canPartition(nums []int) bool {
	var sum int
	var target int
	for i := range nums {
		sum += nums[i]
	}
	if sum%2 != 0 {
		return false
	} else {
		target = sum / 2
	}

	fmt.Printf("target: %d\n", target)
	l := len(nums)

	dp := make([]int, target+1) //step1 dp for sum like 01bag1

	//step3 init dp
	// default is 0

	//step4 loop
	for i := 0; i < l; i++ {
		for j := target; j >= nums[i]; j-- {
			dp[j] = max(dp[j], dp[j-nums[i]]+nums[i]) //step2 formula
			fmt.Println(dp)
			if dp[target] == target {
				return true
			}
		}
		fmt.Println()
	}

	//step5 debug
	for i := range dp {
		fmt.Println(dp[i])
	}

	return false
}
