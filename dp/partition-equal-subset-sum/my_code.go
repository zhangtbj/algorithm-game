package main

import (
	"fmt"
)

func main() {
	//nums := []int{}
	nums := []int{1, 5, 11, 5}

	fmt.Println(canPartition3(nums))
}

func canPartition3(nums []int) bool {
	var sum int
	for i := range nums {
		sum += nums[i]
	}
	if sum%2 != 0 {
		return false
	} else {
		sum /= 2
	}

	fmt.Printf("sum: %d\n", sum)
	l := len(nums)

	dp := make([][]int, l) //step1 dp for nums and sum like 01bag2

	//step3 init dp
	for i := range dp {
		dp[i] = make([]int, sum+1)
		if i == 0 {
			for j := 0; j <= sum; j++ {
				if j >= nums[0] {
					dp[0][j] = nums[0]
				}
			}
		}
	}
	//fmt.Println(dp)

	//step4 loop
	for i := 1; i < l; i++ {
		for j := 1; j <= sum; j++ {
			tmp := 0
			if j-nums[i] >= 0 {
				tmp = dp[i-1][j-nums[i]] + nums[i]
			}
			dp[i][j] = max(dp[i-1][j], tmp) //step2 formula
			if dp[i][j] == sum {
				return true
			}
		}
	}

	//step5 debug
	//for i := range dp {
	//	fmt.Println(dp[i])
	//}

	return false
}
